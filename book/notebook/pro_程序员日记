Mon Apr 13 12:10:10 CST 2015

今天一个每周定时运行的脚本出问题了, 检查过后发现是脚本里的一个字典把内存撑爆了。
这个字典按天记录从开服起到该天止有过某种行为的所有玩家uid。
这个脚本刚开始的时候，内存需求很小，第一个月只需要10M的内存。
很好，这样下来，一年也只需要120M的内存就行了。
可实际上，一年之后，3G的内存被这个字典吃爆了。
因为，这个字典是加速度增长的, 每天的历史总玩家数都比前一天的历史总玩家数。
今天的数据量就是第一天数据量的100倍以上！
脚本就这样跪了。
如果我把每天的数据记录成与历史数据相比较的增量，就不会出现这个问题了。
如第一天记录所有相关玩家uid，第二天记录相对第一天的增量，第三条记录相对前两天的增量，第n天记录相对于前n-1天的增量。
就可以避免这个问题了。缺点就是在提取第n天的历史总用户时，要把前n天的数据进行汇总计算。
但在此种情形下，这种设计要比最终导致爆掉内存的设计优化得多。
这是我第一次真实遇到的数据结构的设计导致程序出错的情况。
引以为鉴。

另，python里，一个空字符的大小不是0，作为一个字符对象它的大小是37 byte。
整数1的大小是24字节，
一个空列表的大小是72字节
一个空集合的大小是232字节
一个空字典的大小是280字节
字符的大小增长是线性的，每增加一个ascii字符，大小增加1个byte.
列表的大小增长也是线性的, 每增加一个元素，大小增加8个byte,
如[{}]的大小并不是72+280, 而是72 + 8 = 80
其他数据结构大小的增长也有其特定的内在规律, 有兴趣可以进行进一步研究。


Mon Apr 13 16:13:29 CST 2015

将数据结构改了, 脚本运行时长是原来的5-6倍，而且计算是增量型的，不过增长速度还算温和。
头一次体会到时间换空间的含义！


Wed May  6 10:54:13 CST 2015

今日所得：
命名时如果有已有的较好理解的通用标准，使用通用标准，不要凭当时的感觉随性定个标准。
不然以后不仅坑别人，连自己都会被坑。locale_config命名方式和吴伟讨论有感。
