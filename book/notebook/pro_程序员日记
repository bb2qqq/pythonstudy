Mon Apr 13 12:10:10 CST 2015
今天一个每周定时运行的脚本出问题了, 检查过后发现是脚本里的一个字典把内存撑爆了。
这个字典按天记录从开服起到该天止有过某种行为的所有玩家uid。
这个脚本刚开始的时候，内存需求很小，第一个月只需要10M的内存。
很好，这样下来，一年也只需要120M的内存就行了。
可实际上，一年之后，3G的内存被这个字典吃爆了。
因为，这个字典是加速度增长的, 每天的历史总玩家数都比前一天的历史总玩家数多。
今天的数据量就是第一天数据量的100倍以上！
脚本就这样跪了。
如果我把每天的数据记录成与历史数据相比较的增量，就不会出现这个问题了。
如第一天记录所有相关玩家uid，第二天记录相对第一天的增量，第三条记录相对前两天的增量，第n天记录相对于前n-1天的增量。
就可以避免这个问题了。缺点就是在提取第n天的历史总用户时，要把前n天的数据进行汇总计算。
但在此种情形下，这种设计要比最终导致爆掉内存的设计优化得多。(因为它能运行不报错！速度还是要慢很多的 2015-06-27按)
这是我第一次真实遇到的数据结构的设计导致程序出错的情况。
引以为鉴。

另，python里，一个空字符的大小不是0，作为一个字符对象它的大小是37 byte。
整数1的大小是24字节，
一个空列表的大小是72字节
一个空集合的大小是232字节
一个空字典的大小是280字节
字符的大小增长是线性的，每增加一个ascii字符，大小增加1个byte.
列表的大小增长也是线性的, 每增加一个元素，大小增加8个byte,
但[{}]的大小并不是72+280, 而是72 + 8 = 80
其他数据结构大小的增长也有其特定的内在规律, 有兴趣可以进行进一步研究。


Mon Apr 13 16:13:29 CST 2015

将数据结构改了, 脚本运行时长是原来的5-6倍，而且计算是增量型的，不过增长速度还算温和。
头一次体会到时间换空间的含义！


Wed May  6 10:54:13 CST 2015

今日所得：
命名时如果有已有的较好理解的通用标准，使用通用标准，不要凭当时的感觉随性定个标准。
不然以后不仅坑别人，连自己都会被坑。locale_config命名方式和吴伟讨论有感。


Mon Jun  1 10:59:40 CST 2015
`rm rf /home/`, 今天我在越南服务器下座日志备份，我将home文件夹备份到 /home/admin/migration_backup文件夹下。
但是有一些小于1k的文件没有备份过来，我打算删除了migration_backup下面的home文件夹，再备份一个新的。
然后我使用了上面的命令。命令失败了，我定睛一看，吓出一身冷汗，在home一词前，我下意识加了个斜杠。如果执行成功的话
机器上的/home文件夹就要灰飞烟灭了。但我这儿犯了第二个错误，rf前少加了横杠。我太粗心大意了以至于自杀计划失败。。

从这事我反思得到下面几点：
1. 使用 rm -rf 时要想清楚（基本废话）
2. 备份文件要起一个不同的名字，在文件夹后加_backup, 在文件后面加.bk, 如此处我的备份文件夹应该叫`home_backup`
3. 使用rm -rf 时一定使用完整的绝对路径，如 `rm -rf /home/admin/migration_backup/home_backup`


Wed Jun  3 17:50:29 CST 2015
exchange_rate = yahoo_exchange_rate() or USD_EXCHANGE_RATE
这段代码，今天导致了好些玩家登不进服务器。它被放在一段for循环里, 多次执行。
yahoo_exchange_rate()会访问一个yahoo提供的api获得实时的人民币对美金汇率。
在测试服务器上，因为数据少，所以这个函数执行起来消耗还行。
但是在正式服务器上，放在for循环里的这个函数的执行，直接导致了进程的占用卡死。
而且每个地方访问yahoo api需要的时间不同啊, urlopen默认的报错时间貌似是10秒。
如果所在的服务器连不上yahoo的api.. oh my god.
这件事情的教训：
1. 在for循环里加东西一定要慎重（基本废话）
2. 调用远程服务器接口的时候一定考虑所需要花费的时间！！！
3. 能缓存的数据尽量缓存，本地总比联网快！


Mon Jun  8 18:21:20 CST 2015

今天在master服务器上复制，解压和压缩文件，特别卡。
然后回头一看玩家全掉线了。我的爷！
再不敢在master上随便操作了。CPU占用高的任务通通到admin上运行。
master等于同时有几百个用户在用啊。啊！


Thu Jun 11 15:08:25 CST 2015

没想到在管理机上的cp，压缩和解压缩操作，竟然导致了filesystem read-only! 惊了。
谨记服务器是豌豆公主，不是搓脚大汉。


Fri Jun 26 12:39:41 CST 2015
在做任何带有危险性的操作时，想想复原计划！
今天把自己精简的bashrc更新到远程服务器时，机器名字被替换掉了，而我没做原来配置的备份！糟了。。。


Sat Jun 27 10:42:24 CST 2015
昨天查错的时候，直接vim了一记，结果查过来查过去百思不得其解，今天早上tail -f, 发现发送http报错却不产生错误日志。yeh, 这是什么鬼咯，看nginx日志，有记录。顺着转发接口一路摸过去，嗨！supervisor里的进程15天前就停了, 崩溃！
下回测试再不vim看日志了，现点现tail -f
